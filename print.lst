


ARM Macro Assembler    Page 1 


    1 00000000         ; Print.s
    2 00000000         ; Student names: Ryan Kim
    3 00000000         ; Last modification date: 3/28/2018
    4 00000000         ; Runs on LM4F120 or TM4C123
    5 00000000         ; EE319K lab 7 device driver for any LCD
    6 00000000         ;
    7 00000000         ; As part of Lab 7, students need to implement these LCD
                       _OutDec and LCD_OutFix
    8 00000000         ; This driver assumes two low-level LCD functions
    9 00000000         ; ST7735_OutChar   outputs a single 8-bit ASCII characte
                       r
   10 00000000         ; ST7735_OutString outputs a null-terminated string 
   11 00000000         
   12 00000000                 IMPORT           ST7735_OutChar
   13 00000000                 IMPORT           ST7735_OutString
   14 00000000                 EXPORT           LCD_OutDec
   15 00000000                 EXPORT           LCD_OutFix
   16 00000000         
   17 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   18 00000000                 THUMB
   19 00000000         
   20 00000000 00000000 
                       Digit0  EQU              0
   21 00000000 00000004 
                       Digit1  EQU              4
   22 00000000 00000008 
                       Digit2  EQU              8
   23 00000000 0000000C 
                       Digit3  EQU              12
   24 00000000 00000010 
                       Digit4  EQU              16
   25 00000000 00000014 
                       Digit5  EQU              20
   26 00000000 00000018 
                       Digit6  EQU              24
   27 00000000 0000001C 
                       Digit7  EQU              28
   28 00000000 00000020 
                       Digit8  EQU              32
   29 00000000 00000024 
                       Digit9  EQU              36
   30 00000000         
   31 00000000         ;-----------------------LCD_OutDec----------------------
                       -
   32 00000000         ; Output a 32-bit number in unsigned decimal format
   33 00000000         ; Input: R0 (call by value) 32-bit unsigned number
   34 00000000         ; Output: none
   35 00000000         ; Invariables: This function must not permanently modify
                        registers R4 to R11
   36 00000000         LCD_OutDec
   37 00000000 E92D 5FFF       PUSH             {R0-R12, LR}
   38 00000004 4602            MOV              R2, R0      ; save input
   39 00000006 F04F 0600       MOV              R6, #0      ; init R6
   40 0000000A F04F 0700       MOV              R7, #0      ; flag which is set
                                                             when first nonzero
                                                             digit is detected
   41 0000000E         ; allocation phase
   42 0000000E B08A            SUB              SP, #40     ; allocate stack



ARM Macro Assembler    Page 2 


   43 00000010         ; access phase
   44 00000010 F000 F896       BL               Space_Find
   45 00000014 4604            MOV              R4, R0      ; save output of Sp
                                                            ace_Find
   46 00000016 F1A4 0401       SUB              R4, #1
   47 0000001A 46A0            MOV              R8, R4      ; R8 = (# of digits
                                                            )-1
   48 0000001C         OutDec_Again
   49 0000001C 4621            MOV              R1, R4
   50 0000001E F04F 000A       MOV              R0, #10
   51 00000022 F000 F8B3       BL               Exponentiation
   52 00000026 4605            MOV              R5, R0      ; save output of Ex
                                                            p
   53 00000028 4601            MOV              R1, R0      ; AAPCS parameter p
                                                            assing
   54 0000002A 4610            MOV              R0, R2      ; AAPCS parameter p
                                                            assing
   55 0000002C F000 F89D       BL               Division_Algorithm ; get digit
   56 00000030 F84D 0006       STR              R0, [SP, R6]
   57 00000034 FB00 F005       MUL              R0, R5
   58 00000038 EBA2 0200       SUB              R2, R0      ; "remove" most rec
                                                            ently pushed digit 
                                                            from number
   59 0000003C F106 0604       ADD              R6, #4      ; pointer to next e
                                                            lement on stack
   60 00000040 3C01            SUBS             R4, #1      ; reduce number of 
                                                            remaining digits to
                                                             push by 1
   61 00000042 DAEB            BGE              OutDec_Again ; repeat until all
                                                             digits are pushed 
                                                            to stack
   62 00000044 F04F 0604       MOV              R6, #4
   63 00000048 FB08 F806       MUL              R8, R6      ; R8 = 4*[(# of dig
                                                            its)-]
   64 0000004C F04F 0600       MOV              R6, #0      ; init R6 to 0
   65 00000050         Print_Again
   66 00000050 4546            CMP              R6, R8
   67 00000052 D012            BEQ              PrintOnesDigit ; always print o
                                                            nes digit at the en
                                                            d no matter what
   68 00000054 F85D 0006       LDR              R0, [SP, R6] ; pop element on s
                                                            tack
   69 00000058 2F00            CMP              R7, #0      ; see if we still n
                                                            eed to check for ex
                                                            traneous zeroes
   70 0000005A DC05            BGT              Print_Now   ; 0 = keep checking
                                                            , 1 = print whateve
                                                            r is remaining
   71 0000005C 2800            CMP              R0, #0
   72 0000005E D009            BEQ              Skip_Print  ; check if popped e
                                                            lement is a number 
                                                            between 0-9
   73 00000060 2809            CMP              R0, #9
   74 00000062 DC07            BGT              Skip_Print  ; check if popped e
                                                            lement is a number 
                                                            between 0-9
   75 00000064 F04F 0701       MOV              R7, #1
   76 00000068         Print_Now
   77 00000068 F100 0030       ADD              R0, #0x30   ; ASCII value for n



ARM Macro Assembler    Page 3 


                                                            umber
   78 0000006C F7FF FFFE       BL               ST7735_OutChar ; print to LCD
   79 00000070 F04F 0701       MOV              R7, #1      ; set flag to 1 to 
                                                            skip checking for e
                                                            xtraneous zeroes
   80 00000074         Skip_Print
   81 00000074 F106 0604       ADD              R6, #4      ; update pointer
   82 00000078 E7EA            B                Print_Again
   83 0000007A         PrintOnesDigit
   84 0000007A F85D 0008       LDR              R0, [SP, R8] ; pop ones digit
   85 0000007E F100 0030       ADD              R0, #0x30   ; ASCII value for n
                                                            umber
   86 00000082 F7FF FFFE       BL               ST7735_OutChar ; print to LCD
   87 00000086         Print_Done
   88 00000086         ; deallocation phase
   89 00000086 B00A            ADD              SP, #40     ; deallocate stack
   90 00000088 E8BD 5FFF       POP              {R0-R12, LR} ; restore regs
   91 0000008C 4770            BX               LR          ; return
   92 0000008E         
   93 0000008E         ;* * * * * * * * End of LCD_OutDec * * * * * * * *
   94 0000008E         
   95 0000008E         ; -----------------------LCD _OutFix--------------------
                       --
   96 0000008E         ; Output characters to LCD display in fixed-point format
                       
   97 0000008E         ; unsigned decimal, resolution 0.001, range 0.000 to 9.9
                       99
   98 0000008E         ; Inputs:  R0 is an unsigned 32-bit number
   99 0000008E         ; Outputs: none
  100 0000008E         ; E.g., R0=0,    then output "0.000 "
  101 0000008E         ;       R0=3,    then output "0.003 "
  102 0000008E         ;       R0=89,   then output "0.089 "
  103 0000008E         ;       R0=123,  then output "0.123 "
  104 0000008E         ;       R0=9999, then output "9.999 "
  105 0000008E         ;       R0>9999, then output "*.*** "
  106 0000008E         ; Invariables: This function must not permanently modify
                        registers R4 to R11
  107 0000008E         LCD_OutFix
  108 0000008E E92D 5FFF       PUSH             {R0-R12, LR}
  109 00000092         ; allocation phase
  110 00000092 B084            SUB              SP, #16     ; allocate stack
  111 00000094 4604            MOV              R4, R0      ; save input
  112 00000096 F04F 012E       MOV              R1, #0x2E   ; period in ASCII
  113 0000009A         ; access phase
  114 0000009A 9103            STR              R1, [SP, #Digit3]
  115 0000009C F000 F850       BL               Space_Find
  116 000000A0 2804            CMP              R0, #4      ; either 4 digits o
                                                            r more
  117 000000A2 DC33            BGT              OutFix_Over
  118 000000A4         ; access thousands digit
  119 000000A4 4620            MOV              R0, R4      ; load input
  120 000000A6 F44F 717A       MOV              R1, #1000   ; AAPCS parameter p
                                                            assing
  121 000000AA F000 F85E       BL               Division_Algorithm 
                                                            ; determine digit
  122 000000AE F100 0030       ADD              R0, #0x30
  123 000000B2 9004            STR              R0, [SP, #Digit4] ; push digit 
                                                            to stack
  124 000000B4 F1A0 0030       SUB              R0, #0x30



ARM Macro Assembler    Page 4 


  125 000000B8 F44F 717A       MOV              R1, #1000
  126 000000BC FB00 F001       MUL              R0, R1
  127 000000C0 EBA4 0400       SUB              R4, R0
  128 000000C4         ; access hundreds digit
  129 000000C4 4620            MOV              R0, R4      ; AAPCS parameter p
                                                            assing
  130 000000C6 F04F 0164       MOV              R1, #100    ; AAPCS parameter p
                                                            assing
  131 000000CA F000 F84E       BL               Division_Algorithm 
                                                            ; determine digit
  132 000000CE F100 0030       ADD              R0, #0x30
  133 000000D2 9002            STR              R0, [SP, #Digit2] ; push digit 
                                                            to stack
  134 000000D4 F1A0 0030       SUB              R0, #0x30
  135 000000D8 F04F 0164       MOV              R1, #100
  136 000000DC FB00 F001       MUL              R0, R1
  137 000000E0 EBA4 0400       SUB              R4, R0
  138 000000E4         ; access tens digit
  139 000000E4 4620            MOV              R0, R4      ; AAPCS parameter p
                                                            assing
  140 000000E6 F04F 010A       MOV              R1, #10     ; AAPCS parameter p
                                                            assing
  141 000000EA F000 F83E       BL               Division_Algorithm 
                                                            ; determine digit
  142 000000EE F100 0030       ADD              R0, #0x30
  143 000000F2 9001            STR              R0, [SP, #Digit1] ; push digit 
                                                            to stack
  144 000000F4 F1A0 0030       SUB              R0, #0x30
  145 000000F8 F04F 010A       MOV              R1, #10
  146 000000FC FB00 F001       MUL              R0, R1
  147 00000100 EBA4 0400       SUB              R4, R0
  148 00000104         ; access ones digit
  149 00000104 F104 0430       ADD              R4, #0x30
  150 00000108 9400            STR              R4, [SP, #Digit0] ; push digit 
                                                            to stack
  151 0000010A E005            B                OutFix_Done
  152 0000010C         OutFix_Over
  153 0000010C F04F 002A       MOV              R0, #0x2A   ; asterisk in ASCII
                                                            
  154 00000110 9000            STR              R0, [SP, #Digit0]
  155 00000112 9001            STR              R0, [SP, #Digit1]
  156 00000114 9002            STR              R0, [SP, #Digit2]
  157 00000116 9004            STR              R0, [SP, #Digit4] ; push asteri
                                                            sks into stack
  158 00000118         OutFix_Done
  159 00000118 9804            LDR              R0, [SP, #Digit4] ; pop digit
  160 0000011A F7FF FFFE       BL               ST7735_OutChar
  161 0000011E 9803            LDR              R0, [SP, #Digit3] 
                                                            ; pop decimal point
                                                            
  162 00000120 F7FF FFFE       BL               ST7735_OutChar
  163 00000124 9802            LDR              R0, [SP, #Digit2] ; pop digit
  164 00000126 F7FF FFFE       BL               ST7735_OutChar
  165 0000012A 9801            LDR              R0, [SP, #Digit1] ; pop digit
  166 0000012C F7FF FFFE       BL               ST7735_OutChar
  167 00000130 9800            LDR              R0, [SP, #Digit0] ; pop digit
  168 00000132 F7FF FFFE       BL               ST7735_OutChar
  169 00000136         ; deallocation phase
  170 00000136 B004            ADD              SP, #16     ; deallocate stack



ARM Macro Assembler    Page 5 


  171 00000138 E8BD 5FFF       POP              {R0-R12, LR} ; restore regs
  172 0000013C 4770            BX               LR          ; return
  173 0000013E         
  174 0000013E 00 00           ALIGN
  175 00000140         ;* * * * * * * * End of LCD_OutFix * * * * * * * *
  176 00000140         
  177 00000140         Space_Find
  178 00000140         ; Determines the number of digits of input
  179 00000140         ; Input: R0 32-bit unsigned number
  180 00000140         ; Output: R0 number of digits of input
  181 00000140         ;
  182 00000140 E92D 5FFC       PUSH             {R2-R12, LR} ; save regs
  183 00000144 4602            MOV              R2, R0      ; save input
  184 00000146 F04F 0001       MOV              R0, #1      ; number of digits 
                                                            of input
  185 0000014A F04F 030A       MOV              R3, #10     ; comparison parame
                                                            ter
  186 0000014E F04F 040A       MOV              R4, #10     ; fixed number
  187 00000152         Space_Again
  188 00000152 4293            CMP              R3, R2
  189 00000154 D806            BHI              Space_Done  ; done if R2<R3
  190 00000156 F100 0001       ADD              R0, #1
  191 0000015A 280A            CMP              R0, #10     ; 10 digits is maxi
                                                            mum
  192 0000015C DA02            BGE              Space_Done  ; loop at most 10 t
                                                            imes
  193 0000015E FB03 F304       MUL              R3, R4      ; check next digit
  194 00000162 E7F6            B                Space_Again
  195 00000164         Space_Done
  196 00000164 E8BD 5FFC       POP              {R2-R12, LR} ; restore regs
  197 00000168 4770            BX               LR          ; return
  198 0000016A         ;
  199 0000016A         
  200 0000016A         Division_Algorithm
  201 0000016A         ; Applies the division algorithm
  202 0000016A         ; Inputs: R0 dividend
  203 0000016A         ;   R1 divisor
  204 0000016A         ; Outputs: R0 quotient
  205 0000016A         ;   R1 remainder
  206 0000016A         ;
  207 0000016A E92D 5FFC       PUSH             {R2-R12, LR} ; save regs
  208 0000016E 4602            MOV              R2, R0      ; copy of dividend
  209 00000170 460B            MOV              R3, R1      ; copy of divisor
  210 00000172 F04F 0000       MOV              R0, #0      ; quotient = 0 init
                                                            ially
  211 00000176         Division_Again
  212 00000176 4293            CMP              R3, R2
  213 00000178 D804            BHI              Division_Done ; done if dividen
                                                            d < divisor
  214 0000017A F100 0001       ADD              R0, #1      ; add 1 to quotient
                                                            
  215 0000017E EBA2 0203       SUB              R2, R3      ; subtract from div
                                                            idend
  216 00000182 E7F8            B                Division_Again
  217 00000184         Division_Done
  218 00000184 4611            MOV              R1, R2      ; lowest positive d
                                                            ividend is remainde
                                                            r
  219 00000186 E8BD 5FFC       POP              {R2-R12, LR} ; restore regs



ARM Macro Assembler    Page 6 


  220 0000018A 4770            BX               LR          ; return
  221 0000018C         ;
  222 0000018C         
  223 0000018C         Exponentiation
  224 0000018C         ; Raises R0 to the R1 power
  225 0000018C         ; Inputs: R0 base
  226 0000018C         ;   R1 exponent
  227 0000018C         ; Outputs: R0 = R0^R1
  228 0000018C         ;
  229 0000018C E92D 5FFC       PUSH             {R2-R12, LR} ; save regs
  230 00000190 4602            MOV              R2, R0      ; save base
  231 00000192 2900            CMP              R1, #0      ; loop R1 times
  232 00000194 D004            BEQ              Exp_Zero
  233 00000196         Exp_Again
  234 00000196 3901            SUBS             R1, #1      ; decrement R1
  235 00000198 D004            BEQ              Exp_Done
  236 0000019A FB00 F002       MUL              R0, R2      ; R0*10
  237 0000019E E7FA            B                Exp_Again
  238 000001A0         Exp_Zero
  239 000001A0 F04F 0001       MOV              R0, #1      ; if R1=0, then R0^
                                                            0 = 1
  240 000001A4         Exp_Done
  241 000001A4 E8BD 5FFC       POP              {R2-R12, LR} ; restore regs
  242 000001A8 4770            BX               LR          ; return
  243 000001AA         ;
  244 000001AA         
  245 000001AA 00 00           ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  246 000001AC                 END                          ; end of file      
                                                                               
                                                             ; end of file
Command Line: --debug --xref --cpu=Cortex-M4 --apcs=interwork --depend=.\print.
d -o.\print.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\
Inc\Luminary --predefine="__EVAL SETA 1" --list=.\print.lst Print.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 17 in file Print.s
   Uses
      None
Comment: .text unused
Division_Again 00000176

Symbol: Division_Again
   Definitions
      At line 211 in file Print.s
   Uses
      At line 216 in file Print.s
Comment: Division_Again used once
Division_Algorithm 0000016A

Symbol: Division_Algorithm
   Definitions
      At line 200 in file Print.s
   Uses
      At line 55 in file Print.s
      At line 121 in file Print.s
      At line 131 in file Print.s
      At line 141 in file Print.s

Division_Done 00000184

Symbol: Division_Done
   Definitions
      At line 217 in file Print.s
   Uses
      At line 213 in file Print.s
Comment: Division_Done used once
Exp_Again 00000196

Symbol: Exp_Again
   Definitions
      At line 233 in file Print.s
   Uses
      At line 237 in file Print.s
Comment: Exp_Again used once
Exp_Done 000001A4

Symbol: Exp_Done
   Definitions
      At line 240 in file Print.s
   Uses
      At line 235 in file Print.s
Comment: Exp_Done used once
Exp_Zero 000001A0

Symbol: Exp_Zero
   Definitions
      At line 238 in file Print.s
   Uses
      At line 232 in file Print.s
Comment: Exp_Zero used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Exponentiation 0000018C

Symbol: Exponentiation
   Definitions
      At line 223 in file Print.s
   Uses
      At line 51 in file Print.s
Comment: Exponentiation used once
LCD_OutDec 00000000

Symbol: LCD_OutDec
   Definitions
      At line 36 in file Print.s
   Uses
      At line 14 in file Print.s
Comment: LCD_OutDec used once
LCD_OutFix 0000008E

Symbol: LCD_OutFix
   Definitions
      At line 107 in file Print.s
   Uses
      At line 15 in file Print.s
Comment: LCD_OutFix used once
OutDec_Again 0000001C

Symbol: OutDec_Again
   Definitions
      At line 48 in file Print.s
   Uses
      At line 61 in file Print.s
Comment: OutDec_Again used once
OutFix_Done 00000118

Symbol: OutFix_Done
   Definitions
      At line 158 in file Print.s
   Uses
      At line 151 in file Print.s
Comment: OutFix_Done used once
OutFix_Over 0000010C

Symbol: OutFix_Over
   Definitions
      At line 152 in file Print.s
   Uses
      At line 117 in file Print.s
Comment: OutFix_Over used once
PrintOnesDigit 0000007A

Symbol: PrintOnesDigit
   Definitions
      At line 83 in file Print.s
   Uses
      At line 67 in file Print.s
Comment: PrintOnesDigit used once
Print_Again 00000050

Symbol: Print_Again



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 65 in file Print.s
   Uses
      At line 82 in file Print.s
Comment: Print_Again used once
Print_Done 00000086

Symbol: Print_Done
   Definitions
      At line 87 in file Print.s
   Uses
      None
Comment: Print_Done unused
Print_Now 00000068

Symbol: Print_Now
   Definitions
      At line 76 in file Print.s
   Uses
      At line 70 in file Print.s
Comment: Print_Now used once
Skip_Print 00000074

Symbol: Skip_Print
   Definitions
      At line 80 in file Print.s
   Uses
      At line 72 in file Print.s
      At line 74 in file Print.s

Space_Again 00000152

Symbol: Space_Again
   Definitions
      At line 187 in file Print.s
   Uses
      At line 194 in file Print.s
Comment: Space_Again used once
Space_Done 00000164

Symbol: Space_Done
   Definitions
      At line 195 in file Print.s
   Uses
      At line 189 in file Print.s
      At line 192 in file Print.s

Space_Find 00000140

Symbol: Space_Find
   Definitions
      At line 177 in file Print.s
   Uses
      At line 44 in file Print.s
      At line 115 in file Print.s

21 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

Digit0 00000000

Symbol: Digit0
   Definitions
      At line 20 in file Print.s
   Uses
      At line 150 in file Print.s
      At line 154 in file Print.s
      At line 167 in file Print.s

Digit1 00000004

Symbol: Digit1
   Definitions
      At line 21 in file Print.s
   Uses
      At line 143 in file Print.s
      At line 155 in file Print.s
      At line 165 in file Print.s

Digit2 00000008

Symbol: Digit2
   Definitions
      At line 22 in file Print.s
   Uses
      At line 133 in file Print.s
      At line 156 in file Print.s
      At line 163 in file Print.s

Digit3 0000000C

Symbol: Digit3
   Definitions
      At line 23 in file Print.s
   Uses
      At line 114 in file Print.s
      At line 161 in file Print.s

Digit4 00000010

Symbol: Digit4
   Definitions
      At line 24 in file Print.s
   Uses
      At line 123 in file Print.s
      At line 157 in file Print.s
      At line 159 in file Print.s

Digit5 00000014

Symbol: Digit5
   Definitions
      At line 25 in file Print.s
   Uses
      None
Comment: Digit5 unused
Digit6 00000018




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

Symbol: Digit6
   Definitions
      At line 26 in file Print.s
   Uses
      None
Comment: Digit6 unused
Digit7 0000001C

Symbol: Digit7
   Definitions
      At line 27 in file Print.s
   Uses
      None
Comment: Digit7 unused
Digit8 00000020

Symbol: Digit8
   Definitions
      At line 28 in file Print.s
   Uses
      None
Comment: Digit8 unused
Digit9 00000024

Symbol: Digit9
   Definitions
      At line 29 in file Print.s
   Uses
      None
Comment: Digit9 unused
10 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

ST7735_OutChar 00000000

Symbol: ST7735_OutChar
   Definitions
      At line 12 in file Print.s
   Uses
      At line 78 in file Print.s
      At line 86 in file Print.s
      At line 160 in file Print.s
      At line 162 in file Print.s
      At line 164 in file Print.s
      At line 166 in file Print.s
      At line 168 in file Print.s

ST7735_OutString 00000000

Symbol: ST7735_OutString
   Definitions
      At line 13 in file Print.s
   Uses
      None
Comment: ST7735_OutString unused
2 symbols
364 symbols in table
